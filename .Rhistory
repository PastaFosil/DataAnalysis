x <- seq(-4, 4, 0.01)*6 + 175
y <- dnorm(x, mean=175, sd=6)
plot(x, y, type='l', xlab="", ylab="")
title(main='Densidad de probabilidad normal', sub=expression(paste(mu==175, " y ", sigma==6)))
abline(v=175, lwd=2, lty=2)
mn = 175
std = 6
x <- seq(-4, 4, 0.01)*std + mn
y <- dnorm(x, mean=mn, sd=std)
plot(x, y, type='l', xlab="", ylab="")
title(main='Densidad de probabilidad normal', sub=expression(paste(mu==mn, " y ", sigma==std)))
abline(v=mn, lwd=2, lty=2)
mn = 75
std = 10
x <- seq(-4, 4, 0.01)*std + mn
y <- dnorm(x, mean=mn, sd=std)
plot(x, y, type='l', xlab="", ylab="")
title(main='Densidad de probabilidad normal', sub=expression(paste(mu==mn, " y ", sigma==std)))
abline(v=mn, lwd=2, lty=2)
title(main='Densidad de probabilidad normal', sub=expression(paste(mu==, mn, " y ", sigma==, std)))
abline(v=mn, lwd=2, lty=2)
title(main='Densidad de probabilidad normal', sub=expression(paste("mu==", mn, " y ", "sigma==", std)))
mn = 75
std = 10
x <- seq(-4, 4, 0.01)*std + mn
y <- dnorm(x, mean=mn, sd=std)
plot(x, y, type='l', xlab="", ylab="")
title(main='Densidad de probabilidad normal', sub=expression(paste("mu==", mn, " y ", "sigma==", std)))
abline(v=mn, lwd=2, lty=2)
pnorm(q=90, mean=75, sd=10)
x <- seq(-4,4,0.01)
y <- dt(x, df=7) # df == freedom degrees
plot(x,y, type='l', main='Densidad t de Student, gl=7', xlab="", ylab="")
abline(v=0, lwd=2, lty=2)
muestra <- c(1.82165160, 1.06824486, 0.38492498, 0.52779737,
0.17989299, 0.38599556, 0.01565589, 0.53166559, 1.08000160, 0.61289266, 0.16050136, 0.35143952, 0.41076615, 1.09468497, 0.53319069, 1.09299258, 0.61343642, 0.15565428, 1.44299912, 0.43475144, 0.60773249, 3.09911364, 0.36185393, 1.00729974, 0.30582083, 0.35948934, 0.20484999, 0.13779880, 0.28064973, 2.03910927, 0.19785169, 0.46706578, 0.30224129)
data <- as.data.frame(muestra)
library(ggplot2)
ggplot(data, aes(muestra)) +
geom_histogram(colour='red', fill='pink', alpha=0.7, bins=7) +
ggtitle('Histograma para la muestra de tamano 33')
ggplot(data, aes(muestra)) +
geom_histogram(colour='red', fill='pink', alpha=0.7, bins=7) +
ggtitle('Histograma para la muestra de tamano 33') +
labs(x='valores', y='frecuencia') +
theme_get() +
theme(plot.title=element_text(hjust=0.5,size=16))
# test statistic value:
(z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40)))
# Testing the hypotheses H0: mu=0.1 vs Ha: mu>0.1 (upper tail testing), random sample size n=40
muestra <- c(0.191825830, 0.090832594, 0.078292920, 0.023187365, 0.275329543, 0.120594281, 0.011730131, 0.727012539, 0.108018454, 0.004800318, 0.070778142, 0.539517386, 0.165975518, 0.136258035, 0.216427932, 0.002537893, 0.563361006, 0.027473375, 0.380678788, 0.310481407, 0.142732480, 0.836212104, 0.149678939, 0.288385634, 0.535300943, 0.491167954, 0.429518316, 0.043545325, 0.443696671, 0.078943105, 0.205748181, 0.167813525, 0.017052988, 0.082652468, 0.125213495, 0.166680130, 0.128717925, 0.003860131, 0.045212421, 0.086816614)
# test statistic value:
(z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40)))
# Testing the hypotheses H0: mu=0.1 vs Ha: mu>0.1 (upper tail testing), random sample size n=40
muestra <- c(0.191825830, 0.090832594, 0.078292920, 0.023187365, 0.275329543, 0.120594281, 0.011730131, 0.727012539, 0.108018454, 0.004800318, 0.070778142, 0.539517386, 0.165975518, 0.136258035, 0.216427932, 0.002537893, 0.563361006, 0.027473375, 0.380678788, 0.310481407, 0.142732480, 0.836212104, 0.149678939, 0.288385634, 0.535300943, 0.491167954, 0.429518316, 0.043545325, 0.443696671, 0.078943105, 0.205748181, 0.167813525, 0.017052988, 0.082652468, 0.125213495, 0.166680130, 0.128717925, 0.003860131, 0.045212421, 0.086816614)
# test statistic value:
(z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40)))
# looking for the rejection region with significance alpha=0.05 (upper tail, value z0.05 such that P(Z<-z0.05))
(z.05 <- qnorm(p=0.05, lower.tail=FALSE))
x <- seq(-4,4,0.01)
y <- dnorm(x)
plot(x,y,type='l', xlab="", ylab="")
title(main="Densidad normal estandar", sub=expression(paste(mu == 0, " y ", sigma == 1))))
title(main="Densidad normal estandar", sub=expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(z.05, x[x>=z.05], max(x)), c(0, y[x>=z.05], 0), col="red")
axis(side = 1, at = z.05, font = 2, padj = 1, lwd = 2)
text(2.5, 0.1, labels = expression(alpha == 0.05), col = "red")
# Getting the p-value
(pvalue <- pnorm(z0, lower.tail=FALSE))
muestra <- c(0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0)
(z0 <- (mean(muestra)-0.9)/sqrt((0.9*(1-0.9))/45))
# Find rejection region with alpha=0.05
(z.05 <- qnorm(p=0.05))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal est치ndar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(min(x), x[x<=z.05], z.05), c(0, y[x<=z.05], 0), col="red")
axis(side = 1, at = z.05, font = 2, padj = 1, lwd = 2)
text(-3, 0.05, labels = expression(alpha == 0.05), col = "red")
# p-value
(pvalue <- pnorm(z0))
x <- seq(-4, 4, 0.01)*1 + 16
y <- dnorm(x, mean=16, sd=1)
plot(x, y, type='l', xlab="", ylab="")
title(main='Densidad de probabilidad normal', sub=expression(paste(mu==16, " y ", sigma==1)))
abline(v=16, lwd=2, lty=2)
1 - pnorm(q=18, mean=16, sd=1) # probability of getting a value over 18 in a distribution with those properties
polygon(c(x[x>18], max(x)), c(y[x>18], 0), col="red")
polygon(c(x[x>18], max(x)), c(0, y[x>18]), col="red")
plot(x, y, type='l', xlab="", ylab="")
title(main='Densidad de probabilidad normal', sub=expression(paste(mu==16, " y ", sigma==1)))
polygon(c(x[x>18], max(x)), c(0, y[x>18]), col="red")
abline(v=16, lwd=2, lty=2)
(P <- 1 - pnorm(q=18, mean=16, sd=1)) # probability of getting a value over 18 in a distribution with those properties
(pnorm(58, mean=60, sd=8/10))
muestra <- c(V1 = 13, V2 = 17, V3 = 20, V4 = 17, V5 = 20, V6 = 20, V7 = 18, V8 = 18, V9 = 16, V10 = 19,
V11 = 13, V12 = 17, V13 = 15, V14 = 19, V15 = 16, V16 = 19, V17 = 22, V18 = 10, V19 = 13, V20 = 21)
# H0: mu=15 vs H1: mu>15
(z0 <- (mean(muestra)-15)/(sd(muestra)/sqrt(20)))
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
# p-value
(pvalue <- pnorm(z0, lower.tail = FALSE))
t.test(x=muestra, alternative='greater', mu=15)
(t.05 <- qt(p = 0.05, df=19 lower.tail = FALSE))
(t.05 <- qt(p = 0.05, df=19, lower.tail = FALSE))
# H0: mu=15 vs H1: mu>15
(t0 <- (mean(muestra)-15)/(sd(muestra)/sqrt(20)))
setwd('/home/juancho/Documents/DataAnalysis')
library(dplyr)
library(lubridate)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
get.best.arima <- function(x.ts, maxord = c(1, 1, 1, 1, 1, 1)){
best.aic <- 1e8
n <- length(x.ts)
for(p in 0:maxord[1])for(d in 0:maxord[2])for(q in 0:maxord[3])
for(P in 0:maxord[4])for(D in 0:maxord[5])for(Q in 0:maxord[6])
{
tryCatch({
fit <- arima(x.ts, order = c(p, d, q),
seas = list(order = c(P, D, Q),
frequency(x.ts)), method = "CSS")
fit.aic <- -2*fit$loglik + (log(n) + 1)*length(fit$coef)
#acf(resid(fit), main = "")
#title(main = "Correlograma de los residuales del ajuste")
#pr <- predict(fit, 12)$pred
#ts.plot(cbind(window(metro.month.ts, start = 2021),
#              pr), col = c("blue", "red"), xlab = "")
#title(main = "Predicci칩n para la serie de afluencia del metro",
#      xlab = "Mes",
#      ylab = "Afluencia (M)")
if(fit.aic < best.aic){
best.aic <- fit.aic
best.fit <- fit
best.model <- c(p, d, q, P, D, Q)
}
},
error=function(e) {
NULL
})
}
list(best.aic, best.fit, best.model)
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df <- read.csv("Proyecto/metro.csv")
metro <- df[,c("fecha", "afluencia")]
metro <- mutate(metro, fecha = as.Date(fecha, "%Y-%m-%d"))
metro <- metro %>%
group_by(fecha) %>% summarise(afluencia = sum(afluencia))
metro$afluencia <- metro$afluencia/1e6
metro <- mutate(metro, Ym=format(fecha, "%Y-%m"))
metro.month <- metro %>% group_by(Ym) %>% summarise(afluencia = sum(afluencia))
df <- data.frame(Ym = c("2023-09", "2023-10", "2023-11", "2023-12"), afluencia = c(89.381556, 101.323022, 87.006321, 87.807614))
metro.month.ts <- ts(metro.month$afluencia, start = 2021, freq = 12)
best.arima.metro <- get.best.arima(metro.month.ts,
maxord = c(2, 2, 2, 2, 2, 2))
best.fit.metro <- best.arima.metro[[2]]  # Modelo
best.arima.metro[[3]] # Tipo de modelo (칩rdenes)
best.fit.metro
best.arima.metro[[1]] # AIC
acf(resid(best.fit.metro), main = "")
title(main = "Correlograma de los residuales del ajuste")
pr <- predict(best.fit.metro, 12)$pred
ts.plot(cbind(window(metro.month.ts, start = 2021),
pr), col = c("blue", "red"), xlab = "")
title(main = "Predicci칩n para la serie de afluencia del metro",
xlab = "Mes",
ylab = "Afluencia (M)")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df <- read.csv("Prototype/metro.csv")
metro <- df[,c("fecha", "afluencia")]
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df <- read.csv("Proyecto/metro.csv")
